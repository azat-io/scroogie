import { Context as TelegrafContext } from 'telegraf'

import {
  compose,
  filter,
  identity,
  join,
  pathOr,
  props,
  isNil,
  unless,
} from 'ramda'

const start = (context: TelegrafContext) => {
  const getNameByContext = compose(
    unless(
      isNil,
      compose(join(' '), filter(identity), props(['first_name', 'last_name'])),
    ),
    pathOr(null, ['message', 'from']),
  ) as (c: TelegrafContext) => string
  context.replyWithMarkdown(
    join('', [
      `–ü—Ä–∏–≤–µ—Ç *${getNameByContext(context)}* ! üññ\n\n`,
      '–Ø –°–∫—Ä—É–¥–∂–∏-–±–æ—Ç. –Ø –ø–æ–º–æ–≥–∞—é –≤–µ—Å—Ç–∏ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π –ª–∏–º–∏—Ç –Ω–∞ ',
      '–º–µ—Å—è—Ü –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–æ–±–∞–≤–ª—è–π —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –Ø –ø–æ–∫–∞–∂—É –æ—Å—Ç–∞—Ç–æ–∫ ',
      '–±—é–¥–∂–µ—Ç–∞ –Ω–∞ –¥–µ–Ω—å, –Ω–∞ –º–µ—Å—è—Ü –∏ –≤—ã–≤–µ–¥—É –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –¥–∏–∞–≥—Ä–∞–º–º–∞—Ö. ',
      '–û—Ç–ø—Ä–∞–≤—å /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é',
    ]),
  )
}

export default start
